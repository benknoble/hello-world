#! /usr/bin/env clojure

(require '[clojure.java.shell :as shell])

(defn read-all
  [stream]
  (loop [acc []]
    (let [red (binding [*read-eval* false]
                (read {:eof :eof} stream))]
      (if (= red :eof)
        acc
        (recur (conj acc red))))))

(defmacro |
  [cmd in]
  `(:out (shell/sh ~@cmd :in ~in)))

(->> (read-all *in*)
     (map flatten)
     (map vec)
     (apply prn-str)
     (| ["sed" "-e" "s/ /, /g"])
     print)

; needed because of shell/sh's use of futures
(shutdown-agents)
